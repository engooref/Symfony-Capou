{% extends 'base.html.twig' %}
{% block encoding %}<meta charset="UTF-8">{% endblock %}
{% block title %}Accueil{% endblock %}
{% block body %}
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css" type="text/css">
    <link rel="stylesheet" href="./css/map.css">
    
	<div id="map" class="py-5 mt-5 map"></div>

    <div id="popup" class="ol-popup">
      <a href="#" id="popup-closer" class="ol-popup-closer"></a>
      <div id="popup-content"></div>
    </div>


{% endblock %}

{% block script %}
	<script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js"></script>
    
	<script type="text/javascript">
        var stylePiq = 
         new ol.style.Style({
             image: new ol.style.Circle({
               fill: new ol.style.Fill({
                       color: 'red'
                     }),
               radius: 5
             }),
           });
        
        var styleSta = 
         new ol.style.Style({
             image: new ol.style.RegularShape({
               fill: new ol.style.Fill({
                       color: 'red'
                     }),
               points: 4,
               radius: 10
             }),
           });
           
        var styleVan = 
         new ol.style.Style({
             image: new ol.style.RegularShape({
               fill: new ol.style.Fill({
                       color: 'red'
                     }),
               points: 3,
               radius: 5
             }),
           });
           

        act();
        var intervalId = setInterval(act,10000);
	  	
	 	function act(){
			$.get({
				url  : '{{ path('mapsControl') }}',
       			dataType : 'json',
       			success : addPoint
   						
   					var feat =  new ol.Feature({
                    					geometry: new ol.geom.MultiPoint(coordPiq),
                    			    });
                    			    			    
                   	feat.setStyle(stylePiq)
                   	var layer = new ol.layer.Vector({
                   		source: new ol.source.Vector({
                  			features: [feat,]
                		})
                	});
                	
                	
                	map.addLayer(layer);     			
       			}	
	        });
		}
			
		function addPoint(data){ 
    		if(map.getLayers() != null){map.getLayers().getSource().clear();}
    		
    		for(let i = 0; i < data['piquet']; i++){
    			coordPiq.push(ol.proj.fromLonLat([long, lat]));
    		}	
   				
        var map = new ol.Map({
            layers: [
              new ol.layer.Tile({
                source: new ol.source.OSM({ maxZoom: 19 })
             })
            ],
            target: 
            	'map',
        		view: new ol.View({
        			center: 
        				ol.proj.fromLonLat([1.3149833, 44.0315281]),
        				maxZoom: 19,
        				zoom: 17
        		})
        });
        
        var container = document.getElementById('popup');
        var content = document.getElementById('popup-content');
        var closer = document.getElementById('popup-closer');
        
        var overlay = new ol.Overlay({
        	element: container,
            autoPan: true,
            autoPanAnimation: {
              duration: 250
            }
        });
        
        map.addOverlay(overlay);
        
        closer.onclick = function() {
        	overlay.setPosition(undefined);
            closer.blur();
            return false;
        };
          
        map.on('singleclick', function (event) {
            if (map.hasFeatureAtPixel(event.pixel) === true) {
            	var coordinate = event.coordinate;    
            	content.innerHTML = '<b>Hello</b><br />';
            	overlay.setPosition(coordinate);
            } else {
            	overlay.setPosition(undefined);
            	closer.blur();
        	}
                });
	
	</script>

{% endblock %}
